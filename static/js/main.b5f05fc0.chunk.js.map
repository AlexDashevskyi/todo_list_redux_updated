{"version":3,"sources":["TodoCreateForm.js","Dashboard.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","todos","dispatch","addTodo","todo","type","payload","props","useState","newTodo","setNewTodo","className","value","onChange","event","target","onClick","deleteTodo","todoId","editTodo","newTitle","toggleTodo","done","id","title","updateTodo","setUpdateTodo","editMode","setEditMode","titleStyle","textDecoration","e","style","checked","deleteAll","map","el","i","key","uuid","Boolean","window","location","hostname","match","initialState","action","newTodos","filter","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5f05fc0.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nfunction TodoCreateForm(props) {\r\n    const [newTodo, setNewTodo] =useState('')\r\n    \r\n    const addButtonHandler = () => {\r\n      props.addTodo(newTodo)\r\n        setNewTodo('')\r\n    };\r\n    return (\r\n        <div>\r\n            TODO LIST\r\n            <div className='mt-2'>\r\n                Create new todo(s);\r\n                <input value={newTodo} onChange={(event) => setNewTodo(event.target.value)} type='text'/>\r\n                <button onClick={addButtonHandler}>create</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todos: state.todos\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addTodo: (todo) => dispatch({type: 'TODO_ADD', payload: todo}),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoCreateForm);","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nfunction Dashboard(props) {\r\n\r\n    const {done, id, title} = props;\r\n\r\n    const [updateTodo, setUpdateTodo] = useState(props.todos.title);\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const titleStyle = done ? {textDecoration: 'line-through'} : {};\r\n\r\n    const saveButtonHandler = (todoId) => {\r\n        props.editTodo(todoId, updateTodo)\r\n        setEditMode(false);\r\n        setUpdateTodo(props.todos.title)\r\n    };\r\n\r\n    if (editMode) {\r\n        return (\r\n            <div>\r\n                <input type='text' value={updateTodo} onChange={(e) => setUpdateTodo(e.target.value)}/>\r\n                <button onClick={() => saveButtonHandler(id)}>save</button>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div>\r\n                <span style={titleStyle}>\r\n                {title}\r\n                <input type='checkbox' checked={done} onChange={() => props.toggleTodo(id, done)}/>\r\n                <button onClick={() => setEditMode(true)}>edit</button>\r\n                <button onClick={() => props.deleteTodo(id)}>X</button>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todos: state.todos\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    deleteTodo: (todoId) => dispatch({type: 'DELETE_TODO', payload: todoId}),\r\n    editTodo: (todoId, newTitle) => dispatch({type: 'EDIT_TODO', payload: {todoId, newTitle}}),\r\n    toggleTodo: (todoId) => dispatch({type: 'TOGGLE_TODO', payload: todoId})\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React from 'react';\nimport {connect} from 'react-redux'\nimport './App.css';\nimport TodoCreateForm from './TodoCreateForm';\nimport Dashboard from \"./Dashboard\";\nimport { uuid } from 'uuidv4';\n\n\nfunction App(props) {\n\n    return (\n\n        <div className=\"App\">\n\n            <TodoCreateForm/>\n            {props.todos.map((el, i) =>\n                <Dashboard\n                    title={el.title}\n                    id={el.id}\n                    done={el.done}\n                    key={uuid()}\n            />)}\n            <button onClick={() => props.deleteAll()}>delete all</button>\n        </div>\n    );\n}\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n});\nconst mapDispatchToProps = (dispatch) => ({\n    deleteAll: (todo) => dispatch({type: 'DELETE_ALL', payload: todo}),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {uuid} from 'uuidv4';\r\n\r\nconst initialState = {\r\n    todos: [\r\n        {\r\n            title: 'First todo',\r\n            done: false,\r\n            id: uuid()\r\n        }, {\r\n            title: 'Second todo',\r\n            done: false,\r\n            id: uuid()\r\n        }, {\r\n            title: 'Third todo',\r\n            done: false,\r\n            id: uuid()\r\n        }, {\r\n            title: 'Fourth todo',\r\n            done: false,\r\n            id: uuid()\r\n        }\r\n    ],\r\n};\r\n\r\nconst todo = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'TODO_ADD':\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, {title: action.payload, done: false, id: uuid()}]\r\n            };\r\n\r\n        case 'DELETE_TODO':\r\n            let newTodos = state.todos.filter(el => el.id !== action.payload)\r\n            return {\r\n                ...state,\r\n                todos: newTodos\r\n            };\r\n        case 'DELETE_ALL':\r\n            return {\r\n                ...state,\r\n                todos: []\r\n            }\r\n\r\n        case 'TOGGLE_TODO':\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(el => {\r\n                    if (el.id === action.payload)\r\n                        return ({...el, done: !el.done})\r\n                    return el;\r\n                })\r\n            }\r\n        case 'EDIT_TODO':\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(el => {\r\n                    if (el.id === action.payload.todoId)\r\n                        return ({...el, title: action.payload.newTitle})\r\n                    return el;\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default todo;\r\n","import { createStore, applyMiddleware} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport todo from './reducer';\r\n\r\nconst store = createStore(todo, composeWithDevTools(\r\n  applyMiddleware(),\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}